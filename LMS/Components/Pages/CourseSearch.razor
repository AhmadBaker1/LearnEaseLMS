@page "/course-search/{SelectedTerm}"
@inject NavigationManager NavManager

<div class="search-container">
    <h2 class="search-title">Enter Your Search Criteria</h2>
    <div class="term-display">
        <span class="term-label">Term:</span>
        <span class="selected-term">@SelectedTerm</span>
    </div>
    <div class="search-fields">
        <div class="input-group">
            <label for="courseInput">Course</label>
            <input id="courseInput" type="text" @bind="CourseCode" placeholder="Enter a course code..." />
        </div>
        <div class="checkbox-group">
            <input id="availableSeatsCheckbox" type="checkbox" @bind="OnlyShowAvailable" />
            <label for="availableSeatsCheckbox">Available Seats</label>
        </div>
    </div>
    <div class="search-actions">
        <button @onclick="SearchCourses" class="search-btn">Search</button>
        <button @onclick="ClearSearch" class="clear-btn">Clear</button>
    </div>
    
    @if (TeachersInformation != null && TeachersInformation.Any())
    {
        <div class="teachers-info">
            <h3 class="section-heading">Teachers' Information</h3>
            @foreach (var teacher in TeachersInformation)
            {
                <div class="teacher-card">
                    <div class="teacher-details">
                        <h4 class="block-heading">Block @teacher.Block</h4>
                        <p class="teacher-name">@teacher.Name</p>
                        <p class="teacher-email">Email: @teacher.Email</p>
                        <p class="teacher-rating">Average Rating: @teacher.AverageRating</p>
                        <p class="course-name">Teaching: @teacher.CourseName</p>
                    </div>
                    <button @onclick="() => AddTeacher(teacher)" class="add-btn">Add to Course</button>
                </div>
            }
        </div>
    }
</div>


@code {
    [Parameter]
    public string SelectedTerm { get; set; }

    private string CourseCode { get; set; }
    private bool OnlyShowAvailable { get; set; }
    private List<Teacher> TeachersInformation { get; set; }

    private void AddTeacher(Teacher teacher)
    {
        NavManager.NavigateTo($"/Registration?selectedCourse={teacher.CourseName}");
    }

    private void SearchCourses()
    {
        // Clear any existing information
        TeachersInformation = null;

        if (!string.IsNullOrWhiteSpace(CourseCode) && CourseCode.ToLower().Contains("oop"))
        {
            // Populate the list with teachers' information for OOP course, assigning them to blocks
            TeachersInformation = new List<Teacher>
            {
                new Teacher { Name = "Ms. Johnson", Email = "ms.johnson@gmail.com", AverageRating = 4.7, CourseName = "Object-Oriented Programming (OOP2)", Block = "A" },
                new Teacher { Name = "Mrs. Brown", Email = "mrs.brown@gmail.com", AverageRating = 4.5, CourseName = "Object-Oriented Programming (OOP2)", Block = "B" },
                new Teacher { Name = "Mr. Jones", Email = "mr.jones@gmail.com", AverageRating = 4.8, CourseName = "Object-Oriented Programming (OOP2)", Block = "C" },
                new Teacher { Name = "Ms. Miller", Email = "ms.miller@gmail.com", AverageRating = 4.4, CourseName = "Object-Oriented Programming (OOP2)", Block = "D" }
                // Add additional teachers as needed
            };
        }
        else if (CourseCode.ToLower().Equals("cpsy-202"))
        {
            // Populate the list with teachers' information for CPSY-202 course, assigning them to blocks
            TeachersInformation = new List<Teacher>
                {
                    new Teacher { Name = "Ms. Sadaf", Email = "ms.Sadaf@gmail.com", AverageRating = 4.7, CourseName = "User Experience and Design (CPSY-202)", Block = "A" },
                    new Teacher { Name = "Mrs. Abdur", Email = "mrs.Abdur@gmail.com", AverageRating = 4.5, CourseName = "User Experience and Design (CPSY-202)", Block = "B" },
                    new Teacher { Name = "Mr. Ramin", Email = "mr.Ramin@gmail.com", AverageRating = 4.8, CourseName = "User Experience and Design (CPSY-202)", Block = "C" },
                    new Teacher { Name = "Ms. Ahmad", Email = "ms.Ahmad@gmail.com", AverageRating = 4.4, CourseName = "User Experience and Design (CPSY-202)", Block = "D" }
                };

        }
        else if (CourseCode.ToLower().Equals("cprg-250"))
        {
            // Populate the list with teachers' information for CPRG-250 course, assigning them to blocks
            TeachersInformation = new List<Teacher>
                {
                    new Teacher { Name = "Ms. Ali", Email = "ms.johnson@gmail.com", AverageRating = 4.7, CourseName = "Database Design and Programming (CPRG-250)", Block = "A" },
                    new Teacher { Name = "Mrs. Karam", Email = "mrs.brown@gmail.com", AverageRating = 4.5, CourseName = "Database Design and Programming (CPRG-250)", Block = "B" },
                    new Teacher { Name = "Mr. Jones", Email = "mr.jones@gmail.com", AverageRating = 4.8, CourseName = "Database Design and Programming (CPRG-250)", Block = "C" },
                    new Teacher { Name = "Ms. Miller", Email = "ms.miller@gmail.com", AverageRating = 4.4, CourseName = "Database Design and Programming (CPRG-250)", Block = "D" }
                };
        }

        else if (CourseCode.ToLower().Equals("phil-241"))
        {
            // Populate the list with teachers' information for CPRG-250 course, assigning them to blocks
            TeachersInformation = new List<Teacher>
                {
                    new Teacher { Name = "Ms. Johnson", Email = "ms.johnson@gmail.com", AverageRating = 4.7, CourseName = "Critical Thinking (PHIL-241)", Block = "A" },
                    new Teacher { Name = "Mrs. Brown", Email = "mrs.brown@gmail.com", AverageRating = 4.5, CourseName = "Critical Thinking (PHIL-241)", Block = "B" },
                    new Teacher { Name = "Mr. Jones", Email = "mr.jones@gmail.com", AverageRating = 4.8, CourseName = "Critical Thinking (PHIL-241)", Block = "C" },
                    new Teacher { Name = "Ms. Miller", Email = "ms.miller@gmail.com", AverageRating = 4.4, CourseName = "Critical Thinking (PHIL-241)", Block = "D" }
                };
        }
        else if (CourseCode.ToLower().Equals("cpsy-200"))
        {
            // Populate the list with teachers' information for CPRG-250 course, assigning them to blocks
            TeachersInformation = new List<Teacher>
                {
                    new Teacher { Name = "Ms. Johnson", Email = "ms.johnson@gmail.com", AverageRating = 4.7, CourseName = "Software Analysis and Design (CPSY-200)", Block = "A" },
                    new Teacher { Name = "Mrs. Brown", Email = "mrs.brown@gmail.com", AverageRating = 4.5, CourseName = "Software Analysis and Design (CPSY-200)", Block = "B" },
                    new Teacher { Name = "Mr. Jones", Email = "mr.jones@gmail.com", AverageRating = 4.8, CourseName = "Software Analysis and Design (CPSY-200)", Block = "C" },
                    new Teacher { Name = "Ms. Miller", Email = "ms.miller@gmail.com", AverageRating = 4.4, CourseName = "Software Analysis and Design (CPSY-200)", Block = "D" }
                };
        }
    }

    private void ClearSearch()
    {
        CourseCode = string.Empty;
        OnlyShowAvailable = false;
        TeachersInformation = null;
    }

    private class Teacher
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public double AverageRating { get; set; }
        public string CourseName { get; set; }
        public string Block { get; set; } // Added block property
    }
}

<style>
    .search-container {
        max-width: 800px;
        margin: auto;
        padding: 2rem;
        background: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .search-title {
        color: #5D1049; /* A deep purple */
        margin-bottom: 1rem;
    }

    .term-display {
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .term-label {
        font-weight: bold;
        color: #4A4A4A;
    }

    .selected-term {
        font-style: italic;
        color: #888;
    }

    .search-fields {
        display: grid;
        grid-template-columns: 1fr auto;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .input-group label,
    .checkbox-group label {
        display: block;
        margin-bottom: 0.5rem;
    }

    .input-group input,
    .checkbox-group input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .checkbox-group {
        display: flex;
        align-items: center;
    }

    .checkbox-group input {
        margin-right: 0.5rem;
    }

    .search-actions {
        text-align: right;
    }

    .search-btn,
    .clear-btn {
        padding: 0.75rem 1.5rem;
        margin: 0 0.5rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .search-btn {
        background-color: #4CAF50; /* Green */
        color: white;
    }

    .clear-btn {
        background-color: #f44336; /* Red */
        color: white;
    }

    .search-btn:hover {
        background-color: #45a049;
    }

    .clear-btn:hover {
        background-color: #d32f2f;
    }

    .teachers-info {
        margin-top: 2rem;
    }

    .section-heading {
        color: #333;
        text-align: left;
        margin-bottom: 1rem;
    }

    .teacher-card {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        margin-bottom: 1rem;
        background: white;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .block-heading {
        color: #5D1049; /* A deep purple */
        margin-bottom: 0.5rem;
    }

    .add-btn {
        padding: 0.5rem 1rem;
        background-color: #007bff; /* Bootstrap blue */
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .add-btn:hover {
        background-color: #0056b3;
    }
</style>